#Область ОписаниеПеременных

&НаКлиенте
Перем Ванесса;

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Делает первичную инициализацию модуля.
&НаКлиенте
Функция ИнициализацияФормы(ВладелецФормы) Экспорт
	Ванесса = ВладелецФормы;
	КешОтступов = Новый Соответствие;
КонецФункции	 

// Обработчик при изменении проекта git
&НаКлиенте
Процедура ПриИзменениПроекта() Экспорт
	Если НЕ Ванесса.Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Ванесса.ФайлСуществуетКомандаСистемы(Ванесса.ПутьКПапкеGit) Тогда
		Возврат;
	КонецЕсли;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеПоискаРепозитория", ЭтаФорма);
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingFind(ОписаниеОповещения, Ванесса.ПутьКПапкеGit);
КонецПроцедуры 

// Обработчик активизации строки дерева
&НаКлиенте
Процедура ДеревоGitПриАктивизацииСтроки() Экспорт
	ТекущиеДанные = Ванесса.Элементы.ДеревоGit.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПустаяСтрока(ТекущиеДанные.Статус) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ТекущиеДанные.Статус = "DELETED" Тогда
		Если ТипЗнч(ТекущиеДанные.ДанныеФайла) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;	 
		Если НЕ ПустаяСтрока(ТекущиеДанные.ДанныеФайла.old_id) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеReadingDeleted", ЭтаФорма, ТекущиеДанные.ДанныеФайла);
			Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingBlob(ОписаниеОповещения, ТекущиеДанные.ДанныеФайла.old_id, 0);
		КонецЕсли;
	Иначе	
		Если ТипЗнч(ТекущиеДанные.ДанныеФайла) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;	 
		
		ДанныеФайла = ТекущиеДанные.ДанныеФайла;
		
		Если ДанныеФайла.Свойство("new_id") И НЕ ПустаяСтрока(ДанныеФайла.new_id) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеCallingBlob", ЭтаФорма, ТекущиеДанные.ДанныеФайла);
			Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingBlob(ОписаниеОповещения, ТекущиеДанные.ДанныеФайла.new_id, 0);
		Иначе
			ДанныеФайла.Вставить("new_id", "");
			ИмяФайла = Ванесса.ДополнитьСлешВПуть(Ванесса.ПутьКПапкеGit) + ДанныеФайла.new_name;
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			ДанныеФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеDiffFile", ЭтаФорма, ДанныеФайла);
			Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingIsBinary(ОписаниеОповещения, ДвоичныеДанные);
		КонецЕсли;	 
	КонецЕсли;	 
	
КонецПроцедуры 

// Закрывает все вкладки показывающие сравнение файлов
&НаКлиенте
Процедура ЗакрытьВсеВкладкиDiff() Экспорт
	VanessaTabs = Ванесса.VanessaTabs;
	МассивИД = Новый Массив;
	Для Сч = 0 По VanessaTabs.tabStack.length - 1 Цикл
		Если Ванесса.ЭтоВкладкаDiff(VanessaTabs.tabStack[Сч]) Тогда
			МассивИД.Добавить(VanessaTabs.tabStack[Сч]);
		КонецЕсли;	 
	КонецЦикла;	
	Для Каждого Вкладка Из МассивИД Цикл
		Вкладка.close();
	КонецЦикла;	 
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОкончаниеReadingDeleted(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	ДвоичныеДанные = Результат;
	Кодировка = ПараметрыВызова[1];
	ДанныеФайла = ДопПараметры;
	
	Если Кодировка < 0 Тогда
		//SetEditorContent("binary", "", FileName, True);
	Иначе
		Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
			ЗакрытьВсеВкладкиDiff();
			ЧтениеТекста = Новый ЧтениеТекста(ДвоичныеДанные.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
			//SetEditorContent(TextReader.Read(), FileName, FileName, True);
			old_name = ДанныеФайла.old_name;
			new_name = ДанныеФайла.new_name;
			old_path = "blob:" + ДанныеФайла.old_id;
			new_id = "";
			new_path = ?(ПустаяСтрока(new_id), Ванесса.ДополнитьСлешВПуть(Ванесса.ПутьКПапкеGit) + new_name, "blob:" + new_id);
			VanessaTabs = Ванесса.VanessaTabs;
			VanessaTabs.diff(ЧтениеТекста.Read(), old_name, old_path, "", new_name, new_path, "Diff", Кодировка, Истина, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеCallingBlob(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	ДанныеФайла = ДопПараметры;
	ДанныеФайла.Вставить("ДвоичныеДанные", Результат);
	ДанныеФайла.Вставить("Кодировка", ПараметрыВызова[1]);
	ДанныеФайла.Вставить("ReadOnly", True);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеReadingDiff", ЭтаФорма, ДанныеФайла);
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingBlob(ОписаниеОповещения, ДанныеФайла.old_id, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеDiffFile(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	ДанныеФайла = ДопПараметры;
	ДанныеФайла.Вставить("Кодировка", ПараметрыВызова[1]);
	ДанныеФайла.Вставить("ReadOnly", False);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеReadingDiff", ЭтаФорма, ДанныеФайла);
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingBlob(ОписаниеОповещения, ДанныеФайла.old_id, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеReadingDiff(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	ReadOnly = Истина;
	
	ДвоичныеДанные = Результат;
	Кодировка = ПараметрыВызова[1];
	ДанныеФайла = ДопПараметры;
	
	Если Кодировка < 0 Тогда
		old_text = "binary";
		old_name = "";
	Иначе
		Если TypeOf(ДвоичныеДанные) = Type("ДвоичныеДанные") Тогда
			ЧтениеТекста = New ЧтениеТекста(ДвоичныеДанные.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
			old_text = ЧтениеТекста.Прочитать();
			old_name = ДанныеФайла.old_name;
		Иначе
			new_text = "error";
			old_name = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеФайла.Кодировка < 0 Тогда
		ReadOnly = true;
		new_text = "binary";
		new_name = "";
	Иначе
		Если TypeOf(ДанныеФайла.ДвоичныеДанные) = Type("ДвоичныеДанные") Тогда
			ЧтениеТекста = New ЧтениеТекста(ДанныеФайла.ДвоичныеДанные.ОткрытьПотокДляЧтения(), КодировкаТекста.UTF8);
			new_text = ЧтениеТекста.Прочитать();
			new_name = ДанныеФайла.new_name;
			ReadOnly = ДанныеФайла.ReadOnly;
		Иначе
			new_text = "error";
			new_name = "";
			ReadOnly = true;
		КонецЕсли;
	КонецЕсли;
	
	old_path = "blob:" + ДанныеФайла.old_id;
	new_path = ?(ПустаяСтрока(ДанныеФайла.new_id), Ванесса.ДополнитьСлешВПуть(Ванесса.ПутьКПапкеGit) + new_name, "blob:" + ДанныеФайла.new_id);
	VanessaTabs = Ванесса.VanessaTabs;
	
	ЗакрытьВсеВкладкиDiff();
	
	VanessaTabs.diff(old_text, old_name, old_path, new_text, new_name, new_path, "Diff", Кодировка, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПоискаРепозитория(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.Success Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеОткрытияРепозиторая", ЭтаФорма);
		Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingOpen(ОписаниеОповещения, Ванесса.ПутьКПапкеGit);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеОткрытияРепозиторая(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.Success Тогда
		НачатьПолучениеСтатуса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеСтатуса()
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginGettingHead(Новый ОписаниеОповещения("ПослеПолученияHead", ЭтаФорма));
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingStatus(Новый ОписаниеОповещения("ПослеПолученияСтатуса", ЭтаФорма));
КонецПроцедуры 

&НаКлиенте
Процедура ПослеПолученияHead(Результат, ДопПараметры) Экспорт
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.Success Тогда
		Файл = Новый Файл(Данные.Result);
		Сообщить(Файл.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатуса(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	StagedФайлы = Новый СписокЗначений;
	ИзмененныеФайлы = Новый СписокЗначений;
	УдаленныеФайлы = Новый СписокЗначений;
	НовыеФайлы = Новый СписокЗначений;
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.success Тогда
		Если Данные.result.Свойство("index") Тогда
			Для Каждого ДанныеФайла Из Данные.result.index Цикл
				status = ВРег(ДанныеФайла.status);
				
				Если status = "IGNORED" Тогда
					Продолжить;
				КонецЕсли;	 
				
				StagedФайлы.Добавить(ДанныеФайла);
				
			КонецЦикла;	 
		КонецЕсли;	 
	ИначеЕсли Данные.error.code = 0 Тогда
	КонецЕсли;
	
	СтрокаКоманды = "
	|cd ""%1""
	|git status > ""%2""";
	
	ФайлВыводКонсоли = ПолучитьИмяВременногоФайла("txt");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%1", Ванесса.ПутьКПапкеGit);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%2", ФайлВыводКонсоли);
	
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);
	
	Если Ванесса.ФайлСуществуетКомандаСистемы(ФайлВыводКонсоли) Тогда
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ФайлВыводКонсоли,"UTF-8");
		ВыводКонсоли = Текст.Прочитать();
		Текст.Закрыть();
		
		ПолучитьИзмененныеФайлы(ИзмененныеФайлы, УдаленныеФайлы, НовыеФайлы, ВыводКонсоли);
	КонецЕсли;	 
	
	Если Данные.result.Свойство("work") Тогда
		Для Каждого ДанныеФайла Из Данные.result.work Цикл
			Элем = ИзмененныеФайлы.НайтиПоЗначению(ДанныеФайла.new_name);
			Если Элем <> Неопределено Тогда
				Элем.Значение = ДанныеФайла;
			КонецЕсли;	 
			Элем = УдаленныеФайлы.НайтиПоЗначению(ДанныеФайла.new_name);
			Если Элем <> Неопределено Тогда
				Элем.Значение = ДанныеФайла;
			КонецЕсли;	 
			Элем = НовыеФайлы.НайтиПоЗначению(ДанныеФайла.new_name);
			Если Элем <> Неопределено Тогда
				Элем.Значение = ДанныеФайла;
			КонецЕсли;	 
		КонецЦикла;	 
	КонецЕсли;	 
	
	ОбновитьДеревоGit(StagedФайлы, ИзмененныеФайлы, УдаленныеФайлы, НовыеФайлы);
	
КонецПроцедуры

&НаКлиенте
Функция НомерКартинкиПоСтатусу(Статус)
	Если Статус = "MODIFIED" Тогда
		Возврат 3; 
	ИначеЕсли Статус = "DELETED" Тогда
		Возврат 2; 
	ИначеЕсли Статус = "UNTRACKED" Тогда
		Возврат 1; 
	ИначеЕсли Статус = "ADDED" Тогда
		Возврат 1; 
	КонецЕсли;	 
КонецФункции	 

&НаКлиенте
Процедура ОбновитьДеревоGit(StagedФайлы, ИзмененныеФайлы, УдаленныеФайлы, НовыеФайлы)
	КореньДерева = Ванесса.ДеревоGit.ПолучитьЭлементы();
	КореньДерева.Очистить();
	Если StagedФайлы.Количество() > 0 Тогда
		УзелStaged = КореньДерева.Добавить();
		УзелStaged.Файл = "Staged";
		УзелStaged.Тип = "Staged";
		СтрокиДерева = УзелStaged.ПолучитьЭлементы();
		
		Для Каждого Элем Из StagedФайлы Цикл
			СтрокаФайл = СтрокиДерева.Добавить();
			СтрокаФайл.Файл = Элем.Значение.new_name;
			СтрокаФайл.ТипКартинки = НомерКартинкиПоСтатусу(Элем.Значение.status);
			СтрокаФайл.Статус = Элем.Значение.status;
			СтрокаФайл.ДанныеФайла = Элем.Значение;
		КонецЦикла;	 
		
		ИдентификаторСтроки = УзелStaged.ПолучитьИдентификатор();
		Ванесса.Элементы.ДеревоGit.Развернуть(ИдентификаторСтроки);
	КонецЕсли;
	
	УзелUnstaged = КореньДерева.Добавить();
	УзелUnstaged.Файл = "Unstaged";
	УзелUnstaged.Тип = "Unstaged";
	СтрокиДерева = УзелUnstaged.ПолучитьЭлементы();
	
	Для Каждого Элем Из ИзмененныеФайлы Цикл
		СтрокаФайл = СтрокиДерева.Добавить();
		Если ТипЗнч(Элем.Значение) = Тип("Структура") Тогда
			СтрокаФайл.Файл = Элем.Значение.new_name;
			СтрокаФайл.ДанныеФайла = Элем.Значение;
		Иначе	
			СтрокаФайл.Файл = Элем.Значение;
		КонецЕсли;	 
		СтрокаФайл.ТипКартинки = НомерКартинкиПоСтатусу("MODIFIED");
		СтрокаФайл.Статус = "MODIFIED";
	КонецЦикла;	 
	
	Для Каждого Элем Из УдаленныеФайлы Цикл
		СтрокаФайл = СтрокиДерева.Добавить();
		Если ТипЗнч(Элем.Значение) = Тип("Структура") Тогда
			СтрокаФайл.Файл = Элем.Значение.new_name;
			СтрокаФайл.ДанныеФайла = Элем.Значение;
		Иначе	
			СтрокаФайл.Файл = Элем.Значение;
		КонецЕсли;	 
		СтрокаФайл.ТипКартинки = НомерКартинкиПоСтатусу("DELETED");
		СтрокаФайл.Статус = "DELETED";
	КонецЦикла;	 
	
	Для Каждого Элем Из НовыеФайлы Цикл
		СтрокаФайл = СтрокиДерева.Добавить();
		Если ТипЗнч(Элем.Значение) = Тип("Структура") Тогда
			СтрокаФайл.Файл = Элем.Значение.new_name;
			СтрокаФайл.ДанныеФайла = Элем.Значение;
		Иначе	
			СтрокаФайл.Файл = Элем.Значение;
		КонецЕсли;	 
		СтрокаФайл.ТипКартинки = НомерКартинкиПоСтатусу("UNTRACKED");
		СтрокаФайл.Статус = "UNTRACKED";
	КонецЦикла;	 
	
	ИдентификаторСтроки = УзелUnstaged.ПолучитьИдентификатор();
	Ванесса.Элементы.ДеревоGit.Развернуть(ИдентификаторСтроки);
	
	
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьИзмененныеФайлы(ИзмененныеФайлы, УдаленныеФайлы, НовыеФайлы, ВыводКонсоли);
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(ВыводКонсоли, Символы.ПС);
	НашлиModified = Ложь;
	НашлиUntracked = Ложь;
	Для Каждого Стр Из МассивСтрок Цикл
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(Стр, "Changes not staged for commit:") > 0 Тогда
			НашлиModified = Истина;
			Продолжить;
		ИначеЕсли Найти(Стр, "Untracked files:") > 0 Тогда
			НашлиUntracked = Истина;
			Продолжить;
		ИначеЕсли Найти(Стр, "no changes added to commit (") > 0 Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ НашлиModified Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиUntracked Тогда
			Если Найти(Стр, "to include in what will be committed)") > 0 Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Стр = СокрЛ(Стр);
		
		Если НЕ НашлиUntracked Тогда
			Если Лев(Стр, 9) = "modified:" Тогда
				Стр = СокрЛ(Сред(Стр, 10));
				ИзмененныеФайлы.Добавить(Стр);
			ИначеЕсли Лев(Стр, 8) = "deleted:" Тогда
				Стр = СокрЛ(Сред(Стр, 10));
				УдаленныеФайлы.Добавить(Стр);
			КонецЕсли;
		Иначе	
			Стр = СокрЛ(Стр);
			НовыеФайлы.Добавить(Стр);
		КонецЕсли;	 
		
	КонецЦикла;	
КонецПроцедуры 


#КонецОбласти