#Область ОписаниеПеременных

&НаКлиенте
Перем Ванесса;

#КонецОбласти

#Область ЭкспортныеПроцедурыИФункции

// Делает первичную инициализацию модуля.
&НаКлиенте
Функция ИнициализацияФормы(ВладелецФормы) Экспорт
	Ванесса = ВладелецФормы;
	КешОтступов = Новый Соответствие;
КонецФункции	 

// Обработчик при изменении проекта git
&НаКлиенте
Процедура ПриИзменениПроекта() Экспорт
	Если НЕ Ванесса.Объект.ИспользоватьКомпонентуVanessaExt Тогда
		Возврат;
	КонецЕсли;	
	
	Если НЕ Ванесса.ФайлСуществуетКомандаСистемы(Ванесса.ПутьКПапкеGit) Тогда
		Возврат;
	КонецЕсли;	
	//
	//ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеОткрытияРепозиторая", ЭтаФорма);
	//Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingOpen(ОписаниеОповещения, Ванесса.ПутьКПапкеGit);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеПоискаРепозитория", ЭтаФорма);
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingFind(ОписаниеОповещения, Ванесса.ПутьКПапкеGit);
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОкончаниеПоискаРепозитория(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.Success Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеОткрытияРепозиторая", ЭтаФорма);
		Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingOpen(ОписаниеОповещения, Ванесса.ПутьКПапкеGit);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеОткрытияРепозиторая(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.Success Тогда
		НачатьПолучениеСтатуса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПолучениеСтатуса()
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginGettingHead(Новый ОписаниеОповещения("ПослеПолученияHead", ЭтаФорма));
	Ванесса.ВнешняяКомпонентаРаботаСGit.BeginCallingStatus(Новый ОписаниеОповещения("ПослеПолученияСтатуса", ЭтаФорма));
КонецПроцедуры 

&НаКлиенте
Процедура ПослеПолученияHead(Результат, ДопПараметры) Экспорт
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.Success Тогда
		Файл = Новый Файл(Данные.Result);
		Сообщить(Файл.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияСтатуса(Результат, ПараметрыВызова, ДопПараметры) Экспорт
	
	StagedФайлы = Новый СписокЗначений;
	ИзмененныеФайлы = Новый СписокЗначений;
	УдаленныеФайлы = Новый СписокЗначений;
	НовыеФайлы = Новый СписокЗначений;
	
	Данные = Ванесса.ПрочитатьОбъектJSON(Результат);
	Если Данные.success Тогда
		//СтатусDELETED = Новый Соответствие;
		//СтатусUNTRACKED = Новый Соответствие;
		//ИзмененныеФайлы = Новый СписокЗначений;
		//Для Каждого ДанныеФайла Из Данные.result.work Цикл
		//	status = ВРег(ДанныеФайла.status);
		//	
		//	Если status = "IGNORED" Тогда
		//		Продолжить;
		//	ИначеЕсли status = "DELETED" Тогда
		//		СтатусDELETED.Вставить(ДанныеФайла.new_name, Истина);
		//	ИначеЕсли status = "UNTRACKED" Тогда
		//		СтатусUNTRACKED.Вставить(ДанныеФайла.new_name, Истина);
		//	КонецЕсли;	 
		//КонецЦикла;	 
		
		Для Каждого ДанныеФайла Из Данные.result.index Цикл
			status = ВРег(ДанныеФайла.status);
			
			Если status = "IGNORED" Тогда
				Продолжить;
			КонецЕсли;	 
			
			//Если СтатусDELETED[ДанныеФайла.new_name] <> Неопределено И СтатусUNTRACKED[ДанныеФайла.new_name] <> Неопределено Тогда
			//	Продолжить;
			//КонецЕсли;	
			
			StagedФайлы.Добавить(ДанныеФайла);
			
		КонецЦикла;	 
		//SetCurrentPage(Items.StatusPage);
		//CurrentItem = Items.Status;
		//Если TypeOf(Результат.result) = Type("Structure") Тогда
		//	AddStatusItems(Результат.result, "Index", "Staged Changes");
		//	AddStatusItems(Результат.result, "Work", "Changes");
		//КонецЕсли;
	ИначеЕсли Данные.error.code = 0 Тогда
		//SetCurrentPage(Items.InitPage);
		//Repository = Undefined;
	КонецЕсли;
	
	СтрокаКоманды = "
	|cd ""%1""
	|git status > ""%2""";
	
	ФайлВыводКонсоли = ПолучитьИмяВременногоФайла("txt");
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%1", Ванесса.ПутьКПапкеGit);
	СтрокаКоманды = СтрЗаменить(СтрокаКоманды, "%2", ФайлВыводКонсоли);
	
	Ванесса.ВыполнитьКомандуОСБезПоказаЧерногоОкна(СтрокаКоманды);
	
	Если Ванесса.ФайлСуществуетКомандаСистемы(ФайлВыводКонсоли) Тогда
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ФайлВыводКонсоли,"UTF-8");
		ВыводКонсоли = Текст.Прочитать();
		Текст.Закрыть();
		
		ПолучитьИзмененныеФайлы(ИзмененныеФайлы, УдаленныеФайлы, НовыеФайлы, ВыводКонсоли);
	КонецЕсли;	 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзмененныеФайлы(ИзмененныеФайлы, УдаленныеФайлы, НовыеФайлы, ВыводКонсоли);
	МассивСтрок = Ванесса.РазложитьСтрокуВМассивПодстрокКлиент(ВыводКонсоли, Символы.ПС);
	НашлиModified = Ложь;
	НашлиUntracked = Ложь;
	Для Каждого Стр Из МассивСтрок Цикл
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если Найти(Стр, "Changes not staged for commit:") > 0 Тогда
			НашлиModified = Истина;
			Продолжить;
		ИначеЕсли Найти(Стр, "Untracked files:") > 0 Тогда
			НашлиUntracked = Истина;
			Продолжить;
		КонецЕсли;	 
		
		Если НЕ НашлиModified Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если НашлиUntracked Тогда
			Если Найти(Стр, "to include in what will be committed)") > 0 Тогда
				Продолжить;
			КонецЕсли;	 
		КонецЕсли;	 
		
		Стр = СокрЛ(Стр);
		
		Если НЕ НашлиUntracked Тогда
			Если Лев(Стр, 9) = "modified:" Тогда
				Стр = СокрЛ(Сред(Стр, 10));
				ИзмененныеФайлы.Добавить(Стр);
			ИначеЕсли Лев(Стр, 8) = "deleted:" Тогда
				Стр = СокрЛ(Сред(Стр, 10));
				УдаленныеФайлы.Добавить(Стр);
			КонецЕсли;
		Иначе	
			Стр = СокрЛ(Стр);
			НовыеФайлы.Добавить(Стр);
		КонецЕсли;	 
		
	КонецЦикла;	
КонецПроцедуры 


#КонецОбласти